package codes.own.my.allmysamplecodes.utility;

/**
 * Created by Tushar on 05-04-2016 at 15:11.
 */

import android.os.Environment;
import android.util.Log;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;



public class PDF {

    //static File cacheDirectory;
    //	private static String FILE = "c:/temp/FirstPdf.pdf";
    private static Font TitleFont = new Font(Font.FontFamily.TIMES_ROMAN, 24, Font.BOLD, BaseColor.BLUE);
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 20, Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

    static float tax=0;
    static float total=0;

    public static String pdf()
    {
        String fileName = "";
        // TODO Auto-generated method stub
        try {
           /* if ( Environment.getExternalStorageState().equals( Environment.MEDIA_MOUNTED ));
            {
                cacheDirectory = new File(Environment.getExternalStorageDirectory(), "TICL/");
            }
            Log.v("cacheDirectory.exists()", cacheDirectory.exists()+" ");
            if( !cacheDirectory.exists() ) {
                cacheDirectory.mkdirs();
            }*/

            File imagesFolder;
            if (Environment.getExternalStorageState().equals( Environment.MEDIA_MOUNTED )) {
                imagesFolder = new File(Environment.getExternalStorageDirectory(), "TICL");
            } else {
                imagesFolder = new File(Environment.getDataDirectory(), "TICL");
            }
//    File imagesFolder = new File(Environment.getExternalStorageDirectory(), IMG_STORAGE_FOLDER_NAME);
            String imagePath = imagesFolder.toString();
            Log.v("imagePath", imagePath + " :" + imagesFolder.mkdirs());
            //imagesFolder.mkdirs();

            Document document = new Document();
//		      PdfWriter.getInstance(document, new FileOutputStream(FILE));

            Date now = new Date();
            String reportTime = new SimpleDateFormat("ddMMyyyyHHmmss").format(now);
            fileName = "Pdf"+reportTime+".pdf";
            File file = new File(imagesFolder, fileName);
            if (file.exists()) {
                Log.v("File exits", "file exist:"+file.exists());
                file.delete();
            }
            FileOutputStream fOut = new FileOutputStream(file);
            PdfWriter.getInstance(document, fOut);
            document.open();

            addMetaData(document);
            addTitlePage(document);
//		      addContent(document);
            document.close();
//		      Toast.makeText(this, "Stop", Toast.LENGTH_LONG).show();
        } catch (Exception e) {
            e.printStackTrace();
            Log.v("Catch block", "" + e);
//		      Toast.makeText(this, ""+e, Toast.LENGTH_LONG).show();
        }
        return fileName;
    }


    private static void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Lars Vogel");
    }

    private static void addTitlePage(Document document)
            throws DocumentException {

        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 1);

        preface.add(new Paragraph("asdsad", TitleFont));
        /*preface.add(new Paragraph("24023 104TH AVE SE, KENT, WA 98031", catFont));*/
        addEmptyLine(preface, 1);
        /*preface.add(new Paragraph("Order generated by: " + new Date(), //$NON-NLS-1$
                smallBold));*/
        addEmptyLine(preface, 3);



        addEmptyLine(preface, 3);
        createTable(preface);

        //addEmptyLine(preface, 1);


        document.add(preface);
        // Start a new page
        document.newPage();
    }

    private static void createTable(Paragraph subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(5);


        PdfPCell c1 = new PdfPCell(new Phrase("INVOICE NO.", subFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("VEHICLE TYPE", subFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("VEHICLE NO", subFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("ENTRY TIME", subFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("EXIT TIME", subFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);


        table.setHeaderRows(1);

        total=tax=0;

        subCatPart.add(table);

    }



    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }


}

